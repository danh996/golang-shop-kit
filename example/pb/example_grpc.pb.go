// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CaculatorServiceClient is the client API for CaculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CaculatorServiceClient interface {
	Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	AddDate(ctx context.Context, in *AddDateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type caculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaculatorServiceClient(cc grpc.ClientConnInterface) CaculatorServiceClient {
	return &caculatorServiceClient{cc}
}

func (c *caculatorServiceClient) Add(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CaculatorService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *caculatorServiceClient) AddDate(ctx context.Context, in *AddDateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.CaculatorService/AddDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaculatorServiceServer is the server API for CaculatorService service.
// All implementations must embed UnimplementedCaculatorServiceServer
// for forward compatibility
type CaculatorServiceServer interface {
	Add(context.Context, *Request) (*Response, error)
	AddDate(context.Context, *AddDateRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCaculatorServiceServer()
}

// UnimplementedCaculatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCaculatorServiceServer struct {
}

func (UnimplementedCaculatorServiceServer) Add(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCaculatorServiceServer) AddDate(context.Context, *AddDateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDate not implemented")
}
func (UnimplementedCaculatorServiceServer) mustEmbedUnimplementedCaculatorServiceServer() {}

// UnsafeCaculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaculatorServiceServer will
// result in compilation errors.
type UnsafeCaculatorServiceServer interface {
	mustEmbedUnimplementedCaculatorServiceServer()
}

func RegisterCaculatorServiceServer(s grpc.ServiceRegistrar, srv CaculatorServiceServer) {
	s.RegisterService(&CaculatorService_ServiceDesc, srv)
}

func _CaculatorService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculatorServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaculatorService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculatorServiceServer).Add(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CaculatorService_AddDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaculatorServiceServer).AddDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CaculatorService/AddDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaculatorServiceServer).AddDate(ctx, req.(*AddDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaculatorService_ServiceDesc is the grpc.ServiceDesc for CaculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CaculatorService",
	HandlerType: (*CaculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _CaculatorService_Add_Handler,
		},
		{
			MethodName: "AddDate",
			Handler:    _CaculatorService_AddDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}
